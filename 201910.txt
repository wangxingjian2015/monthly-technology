Spring事务的底层原理
Spring事务的SPI接口主要有: TransactionDefinition, PlatformTransactionManager, TransactionStatus;
DefaultTransactionDefinition.
PlatformTransactionManager根据底层所使用的不同持久化API或框架，使用如下：
DataSorceTransactionManager:适用于使用JDBC和MyBatis进行数据持久化操作的情况
HibernateTransactionManager:适用于使用Hibernate进行数据持久化操作的情况
JpaTransactionManager适用于使用JPA进行数据持久化操作的情况
另外还有JtaTransactionManager, JdoTransactionManager, JmsTransactionManager等待；
如果使用JTA进行事务管理，可以通过JNDI和Spring的JtaTransactionManager来获取一个容器管理的DataSource。JtaTransactionManager不需要知道DataSource和其他特定的资源，因为它使用容器提供的全局事务管理。而对于其他事务管理器，比如DataSourceTransactionManager, 在定义时需要提供底层的数据源作为其属性，即DataSource。与HibernateTransactionManager对应的是SessionFactory,与JpaTransactionManager对应的是EntityManagerFactory等。
TransactionStatus
Spring是在代码层面执行事务的时候使用TransactionInterceptor进行拦截，然后处理。

@Target(ElementType.TYPE)
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Import(TransactionManagementConfigurationSelector.class)
public @interface EnableTransactionManagement {
	boolean proxyTargetClass() default false;
	AdviceMode mode() default AdviceMode.PROXY;
	int order() default Ordered.LOWEST_PRECEDENCE;
}

BeanPostProcessor
InstantiationAwareBeanPostProcessor
SmartInstantiationAwareBeanPostProcessor
AopInfrastructureBean
ProxyConfig
BeanClassLoaderAware
BeanFactoryAware
ProxyProcessorSupport
AbstractAutoProxyCreator
AbstractAdvisorAutoProxyCreator
InfrastuctureAdvisorAutoProxyCreator

拦截接口intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy)根据条件进行是否要拦截的数据，根据参数可以判断。
DefaultAdviosrChainFactory.getInterceptorsAndDynamicInterceptionAdvice()
PointcutAdvisor为BeanFactoryTransactionAttributeSourceAdvisor
MethodMatcher为TransactionAttributeSourcePointcut
MethodBeforeAdviceAdapter
AfterReturningAdviceAdapter
ThrowsAdviceAdapter
TransactionProxyFactoryBean
AnnotationTransactionAttributeSource.determineTransactionAttribute获取方法属性。

select @@tx_isolation;
set tx_isolation = 'repeatable-read';

Spring事务在数据库事务的基础上进行封装扩展，其主要特性如下：
	1. 支持原有的数据库事务隔离级别，加入了事务传播的概念；
	2. 提供多个事务的合并或隔离的功能；
	3. 提供声明式事务，让业务代码与业务分离，事务变得更易用。

Spring提供了事务相关接口：
	1. TransactionDefiniton: 事务定义，事务的隔离级别和事务的传播行为；
	2. TransactionAttribute:事务属性，实现了对回滚规则的扩展(处理异常);
	3. PlatformTransactionManager：事务管理器；
	4. TransactionStatus: 事务运行时状态；
相关的实现类：
	TransactionInterceptor: 事务拦截器，实现了MethodInterceptor
	TransactionAspectSupport: 事务切面支持， 内部类TransactionInfo封装了事务相关属性

/* Base class for transactional aspects, such as the #TransactionInterceptor or an AspectJ aspect.
This enables the underlying Spring transaction infrastructure to be used easily to implement an aspect for any aspect system.
Subclasses are responsible for calling methods in this class in the correct order.

If no transaction name has been specified in the #TransactionAttribute, the exposed name will be the fully-qualified class name + "." + method name(by default).

Uses the Strategy design pattern. A PlatformTransactionManager implementation will perform the actual transaction management, and a #TransactionAttributeSource is used for determining transaction definitions.
A transaction aspect is serializable if its #PlatformTransactionManager and #TransactionAttributeSource are serializable.
*/
public abstract class TransactionAspectSupport implements BeanFactoryAware, InitializingBean {
	...
	//Opaque object used to hold Transaction information. Subclasses must pass
	//it back to methods on this class, but not see its internals
	protected final class TransactionInfo {
		@Nullable 
		private final PlatformTransactionManager transactionManager;
		@Nullable 
		private final TransactionAttribute transactionAttribute;
		private final String joinpointIdentification;
		@Nullable 
		private TransactionStatus transactionStatus;
		@Nullable 
		private TransactionInfo oldTransactionInfo;
		...
	}
	...
}

7种事务传播属性：
	1. PROPAGATION_REQUIRED
	2. PROPAGATION_REQUIRES_NEW
	3. PROPAGATION_NOT_SUPPORTED
	4. PROPAGATION_SUPPORTS
	5. PROPAGATION_NESTED
	6. PROPAGATION_MANDATORY 
	7. SYNCHRONIZATION_NEVER


public interface TransactionStatus extends SavepointManager, Flushable {
	boolean isNewTransaction();
	boolean hasSavepoint();
	void setRollbackOnly();
	boolean isRollbackOnly();
	@Override 
	void flush();
	boolean isCompleted();
}
-----------------------------------------------
当线程池里面的线程异常后：执行方式是execute时，可以看到堆栈异常的输出。当执行方式是submit时，堆栈异常没有输出，但是调用Future.get()方法时，可以捕获到异常。不会影响线程池里面其他线程的正常执行。线程池会把这个线程移除掉，并创建一个新的线程放到线程池中。

public class FutureTask<V> implements RunableFuture<V> {
	...
	public void run() {
		if (state != NEW || !UNSAFE.compareAndSwapObject(this, runnerOffset, null, 
															Thread.currentThread())) {
			return;
		}
		
		try {
			Callable<V> c = callable;
			if (c != null && state == NEW) {
				V result;
				boolean ran;
				try {
					result = c.call();
					ran = true;
				} catch (Throwable ex) {
					result = null;
					ran = false;
					setException(ex);
				}
				if (ran) {
					set(result);
				}
			}
		} finally {
			// runner must be non-null until state is settled to 
			// prevent concurrent calls to run()
			runner = null;
			// state must be re-read after nulling runner to prevent 
			// leaked interrupts.
			int s = state;
			if (s >= INTERRUPTING) {
				handlePossibleCancellationInterrupt(s);
			}
		}
	}
	...
}

MyCat的应用场景:
	1. 读写分离;
	2. 分库分表；
	3. 多租户；
	4. 黑白名单限制；

Classes such as DataSourceUtils(for JDBC), EntityManagerFactoryUtils(for JPA), SessionFactoryUtils(for Hibernate), PersistenceManagerFactoryUtils(for JDO), and so on exist at a lower level. 

At the very lowest level exists the TransactionAwareDataSourceProxy class. This is a proxy for a target DataSource, which wraps the target DataSource to add awareness of Spring-managed transactions. In this respect, it is similar to transactional JNDI DataSource as provided by a Java EE server.
It should almost never be necessary or desirable to use this class, except when existing code must be called and passed a standard JDBC DataSourc interface implementation. In that case, it is possible that this code is usable, but participating in Spring managed transactions. It is preferable to write your new code by using the higher level abstractions mentioned above.
------------------------------------
Where is TransactionProxyFactoryBean?
Declarative transaction configuration in versions of Spring2.0 and above differs considerably from previous versions of Spring. The main difference is that there is no longer any need to configure TransactionProxyFactoryBean beans.
The pre-Spring2.0 configuration style is still 100% valid configuration; think of the new <tx:tags/> as simply defining TransactionProxyFactoryBean beans on your behalf.
------------------------------------
The most import concepts to grasp with regard to the Spring Framework's declarative transaction support are that this support is enabled via AOP proxies, and that the transactional advice is driven by metadata(currently XML or annotation-based). The combination of AOP with transactional metadata yields an AOP proxy that uses a TransactionInterceptor in conjunction with an appropriate PlatformTransactionManager implementation to drive transactions around method invocations.

Method visibility and @Transactional
When using proxies, you should apply the @Transactional annotation only to with public visibility. If you do annotate protected, private or package-visible methods with the @Transactional annotation, no error raised, but the annotated method does not exhibit the configured transactional settings. Consider the use of AspectJ if you need to annotate non-public methods. 

Keepalived使用的vrrp协议方式，虚拟路由冗余协议 (Virtual Router Redundancy Protocol，简称VRRP)；Heartbeat或Corosync是基于主机或网络服务的高可用方式；简单的说就是，Keepalived的目的是模拟路由器的高可用，Heartbeat或Corosync的目的是实现Service的高可用。所以一般Keepalived是实现前端高可用，常用的前端高可用的组合有，就是我们常见的LVS+Keepalived、Nginx+Keepalived、HAproxy+Keepalived。而Heartbeat或Corosync是实现服务的高可用，常见的组合有Heartbeat v3(Corosync)+Pacemaker+NFS+Httpd 实现Web服务器的高可用、Heartbeat v3(Corosync)+Pacemaker+NFS+MySQL 实现MySQL服务器的高可用。总结一下，Keepalived中实现轻量级的高可用，一般用于前端高可用，且不需要共享存储，一般常用于两个节点的高可用。而Heartbeat(或Corosync)一般用于服务的高可用，且需要共享存储，一般用于多节点的高可用。这个问题我们说明白了，又有博友会问了，那heartbaet与corosync我们又应该选择哪个好啊，我想说我们一般用corosync，因为corosync的运行机制更优于heartbeat，就连从heartbeat分离出来的pacemaker都说在以后的开发当中更倾向于corosync，所以现在corosync+pacemaker是最佳组合。

public interface Filter {
	public void init(FilterConfig filterConfig) throws ServletException;
	public void doFilter(ServletRequest request, ServletResponse response,
							FilterChain chain) throws IOException, ServletException;
	public void destroy();
}

public interface HandlerInterceptor {
	default boolean preHandle(HttpServletRequest request, HttpServletResponse response, 
								Object handler) throws Exception {
		return true;
	}
	
	default void postHandle(HttpServletRequest request, HttpServletResponse response, 
			Object handler, @Nullable ModelAndView modelAndView) throws Exception {}
	
	default void afterCompletion(HttpServletRequest request, HttpServletResponse response,
			Object handler, @Nullable Exception ex) throws Exception {}
}

A HandlerInterceptor gets called before the appropriate HandlerAdapter triggers the execution of the handler itself. This mechanism can be used for a large field of preprocessing aspects, e.g. for authorization checks, or common handler behavior like locale or theme changes. Its main purpose is to allow for factoring out repetitive handler code. 

public interface AsyncHandlerInterceptor extends HandlerInterceptor {
	default void afterConcurrentHandlingStarted(HttpServletRequest request, HttpServletResponse response,
					Object handler) throws Exception {}
}

/*  A ServletContextInitializer to register Filters in a Servlet 3.0+ container. Similar to 
	the ServletContext#addFilter(String, Filter) registration features provided by ServletContext 
	but with a Spring Bean friendly design.
	
	The #setFilter(Filter) Filter must be specified before calling #onStartup(ServletContext). Registrations 
	can be associated with #setUrlPatterns URL patterns and/or servlets (either by #setServletNames or via 
	a #setServletRegistrationBeans ServletRegistrationBeans. When no URL pattern or servlets are specified 
	the filter will be associated to '/*'. The filter name will be deduced if not specified.
*/
public class FilterRegistrationBean extends AbstractFilterRegistrationBean {
	public static final int REQUEST_WRAPPER_FILTER_MAX_ORDER = 	
		AbstractFilterRegistrationBean.REQUEST_WRAPPER_FILTER_MAX_ORDER;
	private Filter filter;
	public FilterRegistrationBean() {}
	public FilterRegistrationBean(Filter filter, ServletRegistrationBean... servletRegistrationBeans) {
		super(servletRegistrationBeans);
		Assert.notNull(filter, "Filter must not be null");
		this.filter = filter;
	}
	
	@Override
	public Filter getFilter() {
		return this.filter;
	}
	public void setFilter(Filter filter) {
		Assert.notNull(filter, "Filter must not be null");
		this.filter = filter;
	}
}

/* Defines callback methods to customize the Java-based configuration for Spring MVC enabled via @EnableWebMvc.
	@EnableWebMvc-annotated configuration classes may implement this interface to be called back and given a 
	chance to customize the default configuration.
*/
public interface WebMvcConfigurer {
	default void configurePathMatch(PathMatchConfigurer configurer) {}
	default void configureContentNegotiation(ContentNegotiationConfigurer configurer) {}
	default void configureAsyncSupport(AsyncSupportConfigurer configurer) {}
	default void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {}
	default void addFormatters(FormatterRegistry registry) {}
	/* Add Spring MVC lifecycle interceptors for pre- and post-processing of controller method invocations.
		Interceptors can be registered to apply to all requests or be limited to a subset of URL patterns.
		Note that interceptors registered here only apply to controllers and not to resource handler requests.
		To intercept requests for static resources either declare a MappedInterceptor bean or switch to advenced
		configuration mode by extending WebMvcConfigurationSupport and then override #resourceHandlerMapping.
	*/
	default void addInterceptors(InterceptorRegistry registry) {}
	default void addResourceHandlers(ResourceHandlerRegistry registry) {}
	default void addCorsMappings(CorsRegistry registry) {}
	default void addViewControllers(ViewControllerRegistry registry) {}
	default void configureViewResolvers(ViewResolverRegistry registry) {}
	/* Add resolvers to support custom controller method argument types. This does not override 
		the built-in support for resolving handler method arguments. To customize the built-in support 
		for argument resolution, configure #RequestMappingHandlerAdapter directly.
	*/
	default void addArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers) {}
	default void addReturnValueHandlers(List<HandlerMethodReturnValueHandler> handlers) {}
	/** Configure the {@link HttpMessageConverter HttpMessageConverters} to use for reading or writing
	 * to the body of the request or response. If no converters are added, a
	 * default list of converters is registered.
	 * <p><strong>Note</strong> that adding converters to the list, turns off
	 * default converter registration. To simply add a converter without impacting
	 * default registration, consider using the method
	 * {@link #extendMessageConverters(java.util.List)} instead.
	*/
	default void configureMessageConverters(List<HttpMessageConverter<?>> converters) {}
	default void extendMessageConverters(List<HttpMessageConverter<?>> converters) {}
	default void configureHandlerExceptionResolvers(List<HandlerExceptionResolver> resolvers) {}
	default void extendHandlerExceptionResolvers(List<HandlerExceptionResolver> resolvers) {}
	@Nullable 
	default Validator getValidator() {
		return null;
	}
	@Nullable
	default MessageCodesResolver getMessageCodesResolver() {
		return null;
	}
}

高并发缓存的设计要点：
	1. 数据一致性;
	2. 缓存穿透;
	3. 缓存击穿;
	4. 缓存雪崩;
	5. 热点缓存问题：多个副本存储；多级缓存；
	6. 缓存的扩容/缩容：一致性Hash；
	7. 缓存的分片；
	8. 缓存的靠前原则；

在软件系统设计层面，很多地方用了缓存：
	-浏览器会缓存页面的元素，这样在重复访问网页时，就避开了要从互联网上下载数据（例如大图片）
	-web服务会把静态的东西提前部署在CDN上，这也是一种缓存
	-数据库会缓存查询，所以同一条查询第二次就是要比第一次快
	-内存数据库（如redis）选择把大量数据存在内存而非硬盘里，这可以看作是一个大型缓存，只是把整个数据库缓存了起来
	-应用程序把最近几次计算的结果放在本地内存里，如果下次到来的请求还是原请求，就跳过计算直接返回结果	

轮询可以使服务器的请求更加均衡，而一致性哈希可以提升应用Nginx的缓存命中率，相对于轮询，一致性哈希会存在单机热点问题，一种解决方法是热点直接推送到接入层Nginx，一种办法是设置一个阈值，当超过阈值，改为轮询算法。
应用Nginx读取本地缓存(本地缓存可以使用Lua Shared Dict, Nginx Proxy Cache(磁盘/内存), Local Redis实现)，如果本地缓存命中则直接返回，使用应用Nginx本地缓存可以提升整体的吞吐量，降低后端的压力，尤其应对热点问题非常有效。
------------------------------------------------------
Cache Aside模式的缺陷：比如一个读操作，但是没有命中缓存，然后就到数据库中读取数据，此时来了一个写操作，写完数据库后，让缓存失效，然后之前的那个读操作再把老的数据放进去，这样会造成脏数据。

Read Through模式是指应用程序始终从缓存中请求数据。 如果缓存没有数据，则它负责使用底层提供程序插件从数据库中检索数据。 检索数据后，缓存会自行更新并将数据返回给调用应用程序。使用Read Through 有一个好处。
我们总是使用key从缓存中检索数据, 调用的应用程序不知道数据库， 由存储方来负责自己的缓存处理，这使代码更具可读性， 代码更清晰。但是这也有相应的缺陷，开发人员需要给编写相关的程序插件，增加了开发的难度性。

Write Through模式和Read Through模式类似，当数据发生更新的时候，先去Cache里面进行更新，如果命中了，则先更新缓存再由Cache方来更新database。如果没有命中的话，就直接更新Cache里面的数据。

Write Behind Caching 这种模式通常是先将数据写入到缓存里面，然后再异步的写入到database中进行数据同步，这样的设计既可以直接的减少我们对于数据的database里面的直接访问，降低压力，同时对于database的多次修改可以进行合并操作，极大的提升了系统的承载能力。
但是这种模式处理缓存数据具有一定的风险性，例如说当cache机器出现宕机的时候，数据会有丢失的可能。
------------------------------------------------------
浏览器缓存是指使用浏览器访问一些网站页面或者HTTP服务时，根据服务端返回的缓存设置响应头将响应内容缓存到浏览器，下次可以直接使用缓存内容或者仅需要去服务端验证内容是否过期即可。这样的好处可以减少浏览器和服务端之间来回传输的数据量，节省带宽提升性能。

1. 服务端响应的Last-Modified会在下次请求时以If-Modified-Since请求头带到服务端进行文档是否修改的验证，如果没有修改返回304，浏览器可以直接使用缓存内容；
2. Cache-Control:max-age和Expire用于决定浏览器端内容缓存多久，即多久过期，过期后则删除缓存重新从服务端获取最新；另外可以用于from cache场景；
3. HTTP/1.1规范定义的Cache-Control优先级高于HTTP/1.0规范定义的Expires;
4. 一般情况下Expires = 当前系统时间+缓存时间(Cache-Control:max-age)；
5. HTTP/1.1规范定义了ETag来通过文档摘要的方式控制。

Last-Modified与ETag同时使用时，浏览器在验证时会同时发送If-Modified-Since和If-None-Match，按照HTTP/1.1规范，如果同时使用If-Modified-Since和If-None-Match则服务端必须两个都验证通过后才能返回304，并且Nginx就是这样做到。

分布式系统怎么保证某个节点挂了，系统仍然正常运行：
	1. 节点的健康检查/探测，及时剔除异常节点；
	2. 节点下线的主动通知；
	3. 集群容错：Failover Cluster;Failfast Cluster;Failsafe Cluster;Failback Cluster;Forking Cluster;

synchronized和Lock的区别：
	1. Lock是interface接口，synchronized是Java关键字，synchronized由JDK实现，不需要编写代码控制加锁和释放；
	2. synchronized修饰的代码在执行异常时，JDK会自动释放线程占用的锁，不需要手动控制；当Lock出现异常时，需要手动unlock，不然很有可能死锁。Lock一般在finally块中释放锁；
	3. Lock可以让等待线程响应中断处理，比如tryLock(long time, TimeUnit unit)，而synchronized却不行，使用synchronized的线程会一直等待，不能够中断，无法控制；
	4. synchronized是非公平锁，Lock支持公平锁和非公平锁，默认非公平锁；
	5. Lock的实现类ReentrantReadWriteLock提供了读写锁的语义；StampedLock；
	6. Lock锁的范围有局限性，仅适用于代码块范围，而synchronized可以锁住代码块、对象实例、类、方法；
	7. Lock可以绑定条件，实现分组唤醒需要的线程；synchronized要么随机唤醒一个，要么唤醒全部线程。

现在的系统如何提升100倍的请求，架构怎么演化：
	1. 微服务划分的粒度是否合理；
	2. 哪些具备横向扩展能力，哪些不具备，瓶颈点在哪里；
	3. 单服务内的优化：并发、异步、锁粒度、流程优化；
	4. 高并发缓存设计；
	5. 熔断降级的设计；
	6. 业务优化；实时改批量等；
	7. 分库分表；ES，MongoDB；

/**
 * Bootstrap listener to start up and shut down Spring's root {@link WebApplicationContext}.
 * Simply delegates to {@link ContextLoader} as well as to {@link ContextCleanupListener}.
 *
 * <p>As of Spring 3.1, {@code ContextLoaderListener} supports injecting the root web
 * application context via the {@link #ContextLoaderListener(WebApplicationContext)}
 * constructor, allowing for programmatic configuration in Servlet 3.0+ environments.
 * See {@link org.springframework.web.WebApplicationInitializer} for usage examples.
 * @see org.springframework.web.WebApplicationInitializer
 */
public class ContextLoaderListener extends ContextLoader implements ServletContextListener {
	public ContextLoaderListener() {}
	public ContextLoaderListener(WebApplicationContext context) {
		super(context);
	}
	@Override 
	public void contextInitialized(ServletContextEvent event) {
		initWebApplicationContext(event.getServletContext());
	}
	@Override 
	public void contextDestroyed(ServletContextEvent event) {
		closeWebApplicationContext(event.getServletContext());
		ContextCleanupListener.cleanupAttributes(event.getServletContext());
	}
}
--------------------------------
对于Web类的Spring的启动流程：
	1.首先，对于一个web应用，其部署在web容器中，web容器提供其一个全局的上下文环境，这个上下文就是ServletContext，其为后面的spring IoC容器提供宿主环境；

	2.其 次，在web.xml中会提供有contextLoaderListener。在web容器启动时，会触发容器初始化事件，此时 contextLoaderListener会监听到这个事件，其contextInitialized方法会被调用，在这个方法中，spring会初始 化一个启动上下文，这个上下文被称为根上下文，即WebApplicationContext，这是一个接口类，确切的说，其实际的实现类是 XmlWebApplicationContext。这个就是spring的IoC容器，其对应的Bean定义的配置由web.xml中的 context-param标签指定。在这个IoC容器初始化完毕后，spring以WebApplicationContext.ROOTWEBAPPLICATIONCONTEXTATTRIBUTE为属性Key，将其存储到ServletContext中，便于获取；

	3.再 次，contextLoaderListener监听器初始化完毕后，开始初始化web.xml中配置的Servlet，这里是DispatcherServlet，这个servlet实际上是一个标准的前端控制器，用以转发、匹配、处理每个servlet请 求。DispatcherServlet上下文在初始化的时候会建立自己的IoC上下文，用以持有spring mvc相关的bean。在建立DispatcherServlet自己的IoC上下文时，会利用WebApplicationContext.ROOTWEBAPPLICATIONCONTEXTATTRIBUTE先从ServletContext中获取之前的根上下文(即WebApplicationContext)作为自己上下文的parent上下文。有了这个 parent上下文之后，再初始化自己持有的上下文。这个DispatcherServlet初始化自己上下文的工作在其initStrategies方 法中可以看到，大概的工作就是初始化处理器映射、视图解析等。这个servlet自己持有的上下文默认实现类也是 XmlWebApplicationContext。初始化完毕后，spring以与servlet的名字相关(此处不是简单的以servlet名为 Key，而是通过一些转换，具体可自行查看源码)的属性为属性Key，也将其存到ServletContext中，以便后续使用。这样每个servlet 就持有自己的上下文，即拥有自己独立的bean空间，同时各个servlet共享相同的bean，即根上下文(第2步中初始化的上下文)定义的那些 bean。
--------------------------------
MySQL行转列：一般通过case when语句 + group by来实现。也可以通过Sql Server的运算符pivot来实现。用传统的方法，比较好理解，层次清晰。但是pivot,unpivot提供的语法比一系列复杂的select...case when...group by语句中所指定的语法更简单、更具可读性。

在 Java 虚拟机中，每个 Java 对象都有一个对象头 （object header） ，由标记字段和类型指针构成，标记字段用来存储对象的哈希码， GC 信息， 持有的锁信息，而类型指针指向该对象的类 Class ，在 64 位操作系统中，标记字段占有 64 位，而类型指针也占 64 位，也就是说一个  Java  对象在什么属性都没有的情况下要占有 16 字节的空间，当前 JVM 中默认开启了压缩指针，这样类型指针可以只占 32 位，所以对象头占 12 字节， 压缩指针可以作用于对象头，以及引用类型的字段。

JVM 为了内存对齐，会对字段进行重排序，这里的对齐主要指  Java  虚拟机堆中的对象的起始地址为 8 的倍数，如果一个对象用不到 8N 个字节，那么剩下的就会被填充，另外子类继承的属性的偏移量和父类一致，以 Long 为例，他只有一个非 static 属性 value ，而尽管对象头只占有 12 字节，而属性 value 的偏移量只能是 16， 其中 4 字节只能浪费掉，所以字段重排就是为了避免内存浪费， 所以我们很难在 Java 字节码被加载之前分析出这个 Java 对象占有的实际空间有多大，我们只能通过递归父类的所有属性来预估对象大小，而真实占用的大小可以通过  Java agent 中的 Instrumentation获取。

当然内存对齐另外一个原因是为了让字段只出现在同一个 CPU 的缓存行中，如果字段不对齐，就有可能出现一个字段的一部分在缓存行 1 中，而剩下的一半在 缓存行 2 中，这样该字段的读取需要替换两个缓存行，而字段的写入会导致两个缓存行上缓存的其他数据都无效，这样会影响程序性能。

通过内存对齐可以避免一个字段同时存在两个缓存行里的情况，但还是无法完全规避缓存伪共享的问题，也就是一个缓存行中存了多个变量，而这几个变量在多核 CPU 并行的时候，会导致竞争缓存行的写权限，当其中一个 CPU 写入数据后，这个字段对应的缓存行将失效，导致这个缓存行的其他字段也失效。

在 Disruptor 中，通过填充几个无意义的字段，让对象的大小刚好在 64 字节，一个缓存行的大小为64字节，这样这个缓存行就只会给这一个变量使用，从而避免缓存行伪共享，但是在 jdk7 中，由于无效字段被清除导致该方法失效，只能通过继承父类字段来避免填充字段被优化，而 jdk8 提供了注解@Contended 来标示这个变量或对象将独享一个缓存行，使用这个注解必须在 JVM 启动的时候加上 -XX:-RestrictContended 参数，其实也是用空间换取时间。
---------------------------------------------
与东西流量有关的问题：
流量管理(服务发现、负载均衡、路由、限流、熔断、容错等)、可观测性(监控、日志聚合、计量、跟踪)、安全(认证、授权)，设置更高级的动态配置、故障注入、镜像流量等。
相比来说，Sidecar模式更为巧妙并更进一步。通过容器机制，在进程上是隔离的，基于L7代理通讯，运行微服务由多语言开发。
---------------------------------------------
DefaultListableBeanFactory
XmlBeanDefinitionReader
AbstractBeanDefinition
Resource 
BeanDefinition:描述了XML中一个bean节点及其子节点的所有属性，将xml中的描述转变为内部的field信息，例如:scope, lazyinit,ContructorArgumentValues,PropertyValues等，是一个包罗万象的接口，其子类实现包括GenericBeanDefintion,RootBeanDefinition, ChildBeanDefintion等。
EncodeResource
InputSource
Document 
BeanDefinitionDocumentReader
XmlReaderContext
BeanDefinitionParserDelegate
ConfigurableListableBeanFactory
ConversionService
PropertyPlaceholderConfigurer
LoadTimeWeaverAware
RootBeanDefinition
FactoryBean
SmartFactoryBean
SmartInitializingSingleton
AbstractBeanFactory
AbstractAutowireCapableBeanFactory
BeanPostProcessor 
DefaultSingletonBeanRegistry
InstantiationAwareBeanPostProcessor 
BeanWrapper
BeanFactoryAware 
PropertyDescriptor
ReaderContext:Bean Definition解析过程中的上下文对象，封装了Resource, ProblemReporter, EventListener, SourceExtrator等；
Element
BeanDefinitionHolder:包含一个BeanDefinition, 同时包含了beanName和aliases，更好的封装了一次。
BeanDefinitionDocumentReader:定义了从Document对象中解析BeanDefinition并且注册到Registry中涉及到的接口，其默认实现类是DefaultBeanDefinitionDocumentReader，主要是被XmlBeanDefinitionReader委派去处理Document对象。
BeanDefinitionParserDelegate: Stateful delegate class used to parse XML bean definitions. Intended for use both the main parser and any extension #BeanDefintionParser or #BeanDefinitionDecorators.
----------------------
public interface SmartInitializingSingleton {
	void afterSingletonsInstantiated();
}

首先初始化名字为"conversionService"的Bean,为什么是conversionService呢? 原因是注册这个bean之后，类似于前端传给后端的非基础类型和基础类型的包装类之外，其他的就可以考虑采用ConversionService来进行类型的转换，初始化这个"conversionService"是在上面源码中的beanFactory.getBean(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class)进行的。

Dubbo集群扩展:已知扩展：
	1. FailoverCluster;
	2. FailfastCluster;
	3. FailsafeCluster;
	4. FailbackCluster;
	5. ForkingCluster;
	6. AvailableCluster;
	7. BroadcastCluster

Dubbo序列化扩展接口:
	1. org.apache.dubbo.common.serialize.Serialization;
	2. org.apache.dubbo.common.serialize.ObjectInput;
	3. org.apache.dubbo.common.serialize.ObjectOutput;
已知扩展:
	1. org.apache.dubbo.common.serialize.dubbo.DubboSerialization;
	2. org.apache.dubbo.common.serialize.hession.Hession2Serialization;
	3. org.apache.dubbo.common.serialize.java.JavaSerialization;
	4. org.apache.dubbo.common.serialize.java.CompactedJavaSerialization;

SQL中的in和exists：小表驱动大表；in适合于外表大而内表小的情况，exists适合于外表小而内表大的情况。
in和exists的适用场景：
	1. in查询在内部表和外部表上都可以使用到索引；
	2. exists查询仅在内部表上可以使用到索引；
	3. 当子查询结果集很大，而外部表较小的时候，exists的Block Nested Loop(Block嵌套循环)的作用开始显现，并弥补外部表无法用到索引的缺陷，查询效率会优于in；
	4. 当查询结果集较小，而外部表很大的时候，exists的Block嵌套循环优化效果不明显,in的外表索引优势占主要作用，此时in的查询效率会优于exists;
	5. 网上的说法不准确。其实“表的规模”不是看内部表和外部表，而是外部表和子查询结果集。

in和exists执行时，in是先执行子查询中的查询，然后再执行主查询。而exists查询它是先执行主查询，即外层表的查询，然后再执行子查询。exists 和 in 在执行时效率单从执行时间来说差不多，exists要稍微优于in。在使用时一般应该是用exists而不用in如果子查询得出的结果集记录较少，主查询中的表较大且又有索引时应该用in,反之如果外层的主查询记录较少，子查询中的表大，又有索引时使用exists。IN时不对NULL进行处理。

Spring Cloud Circuit Breaker支持的实现：
	1. Netflix Hystrix;
	2. Resilience4J;
	3. Sentinel;
	4. Spring Retry;
The following starters are available with the Spring Cloud BOM:
	- Hystrix:org.springframework.cloud:spring-cloud-starter-netflix-hystrix
	- Resilience4J:org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j
	- Reactive Resilience4J:org.springframework.cloud:spring-cloud-starter-circuitbreaker-reator-resilience4j
	- Spring Retry:org.springframework.cloud:spring-cloud-starter-circuitbreaker-spring-retry
	- Sentinel:org.springframework.cloud:spring-cloud-starter-circuitbreaker-sentinal

重写的规则：
	1. 访问修饰符一定要不小于被重写方法的访问修饰符；
	2. 参数列表必须与被重写方法相同；
	3. 重写的方法返回值必须和被重写的方法的返回一致或者兼容；
	4. 重写的方法所抛出的异常必须和被重写方法的抛出异常一致，或者是其子类；
	5. 被重写的方法不能是private，子类再写一个同名的方法并不是对父类方法进行重写，而是重新生成一个新的方法；
	6. 静态方法不能重写；
	7. 不能重写final方法，子类中必须重写父类中的abstract方法；

方法是静态的，它的行为就不具有动态性。静态方法是类、而非单个对象相关联的。重写依赖于类的实例，而静态方法和类实例并没有什么关系；而且静态方法在编译时就已经确定，而方法重写是在运行时确定的(动态绑定)；
	1)父类的静态方法不能被子类覆盖为非静态方法（编译出错）
	2)父类的非静态方法不能被子类覆盖为静态方法；
	3)构造方法不能被重写；因为构造方法是隐式的static方法。其实这个问题切入点很多，首先构造方法没有返回值、方法名必须和所在类名相同，这点注定子类无法重写父类构造方法。另外多态方面、重写是多态的一种体现方式，假设在子类重写构造方法是成立的，那么子类何谈实例成父类。另外重要一点，子类可以使用super()调用父类的构造方法，且必须放在子类构造方法内的第一行。

 